// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReservationServiceDAL;

#nullable disable

namespace ReservationServiceDAL.Migrations
{
    [DbContext(typeof(ReservationServiceContext))]
    [Migration("20241105084339_UpdatedReservationsFields")]
    partial class UpdatedReservationsFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReservationServiceDAL.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("ShowtimeId")
                        .HasColumnType("int");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("isCancelable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 3,
                            Date = new DateOnly(2024, 11, 7),
                            Name = "Jane Smith",
                            ShowtimeId = 2,
                            TicketTypeId = 1,
                            TimeOfReservation = new DateTime(2024, 11, 5, 8, 43, 36, 509, DateTimeKind.Utc).AddTicks(3659),
                            TotalCost = 0m,
                            isCancelable = true
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1,
                            Date = new DateOnly(2024, 11, 7),
                            Name = "Jane Smith",
                            ShowtimeId = 2,
                            TicketTypeId = 2,
                            TimeOfReservation = new DateTime(2024, 11, 5, 8, 43, 36, 509, DateTimeKind.Utc).AddTicks(5202),
                            TotalCost = 0m,
                            isCancelable = true
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2,
                            Date = new DateOnly(2024, 11, 12),
                            Name = "Mei Chao",
                            ShowtimeId = 4,
                            TicketTypeId = 1,
                            TimeOfReservation = new DateTime(2024, 11, 5, 8, 43, 36, 509, DateTimeKind.Utc).AddTicks(5210),
                            TotalCost = 0m,
                            isCancelable = true
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1,
                            Date = new DateOnly(2024, 11, 5),
                            Name = "Richard Cameron",
                            ShowtimeId = 2,
                            TicketTypeId = 3,
                            TimeOfReservation = new DateTime(2024, 11, 5, 8, 43, 36, 509, DateTimeKind.Utc).AddTicks(5212),
                            TotalCost = 0m,
                            isCancelable = false
                        });
                });

            modelBuilder.Entity("ReservationServiceDAL.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 320m,
                            Type = "For adults"
                        },
                        new
                        {
                            Id = 2,
                            Price = 175m,
                            Type = "For children"
                        },
                        new
                        {
                            Id = 3,
                            Price = 250m,
                            Type = "For students"
                        });
                });

            modelBuilder.Entity("ReservationServiceDAL.Entities.Reservation", b =>
                {
                    b.HasOne("ReservationServiceDAL.Entities.TicketType", "Ticket")
                        .WithMany("Reservations")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Reservations_TicketType");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ReservationServiceDAL.Entities.TicketType", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
